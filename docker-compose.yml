version: '3'

services:

  mongo1:
    image: mongo-master
    hostname: mongo1
    volumes:
      - ./mongo1:/data/db
    networks:
      - backendweb
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0" ]

  mongo2:
    image: mongo
    hostname: mongo2
    volumes:
      - ./mongo2:/data/db
    networks:
      - backendweb
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0" ]
    depends_on:
      - mongo1

  backend:
   image: backend
   environment:
     - SERVICE_PORTS=8080
   deploy:
     resources:
      limits:
        memory: 300m
     replicas: 6
     update_config:
       parallelism: 3
     restart_policy:
       condition: on-failure
       max_attempts: 1
       window: 20s
   networks:
     - backendweb
   depends_on:
     - mongo

  frontend:
   image: frontend
   environment:
     - SERVICE_PORTS=80
   deploy:
     resources:
      limits:
        memory: 50m
     replicas: 2
     update_config:
       parallelism: 1
       delay: 5s
     restart_policy:
       condition: on-failure
       max_attempts: 1
       window: 20s
   networks:
     - frontendweb
   depends_on:
     - backend

  proxyfrontend:
    image: dockercloud/haproxy
    depends_on:
      - frontend
    environment:
      - BALANCE=leastconn
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 80:80
    networks:
      - frontendweb
    deploy:
      placement:
        constraints: [node.role == manager]

  proxybackend:
    image: dockercloud/haproxy
    depends_on:
      - backend
    environment:
      - BALANCE=leastconn
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 8080:80
    networks:
      - backendweb
    deploy:
      placement:
        constraints: [node.role == manager]

  portainer:
    image: portainer/portainer
    ports:
      - 9000:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

networks:
  backendweb:
    driver: overlay
  frontendweb:
    driver: overlay